const fs = require('fs')
const path = require('path')
const cp = require('child_process')
const env = process.env

function _main_() {
    const _path = `${env.PWD}/src/locales`
    const list = fs.readdirSync(_path)
    const allFolders = _readFolders(list.filter((item) => item !== 'translationKeys.ts'))
    const keys_string = _extract_names(allFolders)

    let result = `// Autogenerated file run "yarn mk-locales"\n\nexport const validTranslationKeys = \n${JSON.stringify(
        allFolders,
        true,
        2
    )}\n\nexport type iKeyTranslations = ${keys_string}\n\nexport type LangKeys = keyof typeof validTranslationKeys`

    const filep = `${env.PWD}/src/locales/translationKeys.ts`
    const confp = `${env.PWD}/.prettierrc.json`
    fs.writeFileSync(filep, result)
    cp.exec(`prettier --config ${confp} --write ${filep}`)

    console.log('RESULT TERMINATED')
}

function _extract_names(allFolders) {
    const arr = Object.keys(allFolders)
    let resArr = []

    arr.map((el) => {
        const _a = Object.keys(allFolders[el])
        for (const _item of _a) {
            resArr.push(_item)
        }
    })
    const _new_arr = [...new Set(resArr)]
    let txt = '\n '
    
    for (const item of _new_arr) {
        // txt += _names_iterator(allFolders[item])
        txt += `'${item}' | `
    }

    return txt.substring(0, txt.length - 2)
}

function _deeperLevel(json, file, item, root) {
    for (const key in file) {
        if (Object.hasOwnProperty.call(file, key)) {
            const keyName = root ? `${item.replace('.json', '')}:${key}` : `${item}.${key}`
            if (typeof file[key] === 'object') {
                _deeperLevel(json, file[key], keyName, false)
            } else {
                json[keyName] = file[key]
            }
        }
    }
}

function _readFolders(list) {
    const json = {}

    for (const item of list) {
        const locale = `${env.PWD}/src/locales/${item}`
        const _list = fs.readdirSync(locale)
        const locale_v = _readList(item, _list)
        json[item] = locale_v
    }
    return json
}

function _readList(folderName, list) {
    const json = {}

    for (const item of list) {
        const file = JSON.parse(
            fs.readFileSync(`${env.PWD}/src/locales/${folderName}/${item}`, 'utf8', (err, data) => {
                if (err) {
                    return {}
                }
            })
        )
        _deeperLevel(json, file, item, true)
    }
    return json
}

_main_()
